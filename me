diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileAppend.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileAppend.java
index db732da..dcecf40 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileAppend.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileAppend.java
@@ -144,7 +144,7 @@ public class FileAppend extends AbstractConnector implements Connector {
 		FileSystemManager manager = VFS.getManager();
 		// if the file does not exist, this method creates it
 		FileSystemOptions opts = FTPSiteUtils.createDefaultOptions();
-		FileObject fileObj = manager.resolveFile(fileLocation + filename, opts);
+		FileObject fileObj = manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation,filename), opts);
 
 		if (!filebeforepprocess.equals("")) {
 			FileObject fBeforeProcess = manager.resolveFile(filebeforepprocess + filename, opts);
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileArchives.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileArchives.java
index 194f89f..2899054 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileArchives.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileArchives.java
@@ -47,39 +47,43 @@ public class FileArchives extends AbstractConnector implements Connector {
 
 	public void connect(MessageContext messageContext) throws ConnectException {
 		String fileLocation =
-		                      getParameter(messageContext, "filelocation") == null ? "" : getParameter(
-		                                                                                               messageContext,
-		                                                                                               "filelocation").toString();
+				getParameter(messageContext, "filelocation") == null ? "" : getParameter(
+						messageContext,
+						"filelocation").toString();
 		String filename =
-		                  getParameter(messageContext, "file") == null ? "" : getParameter(
-		                                                                                   messageContext,
-		                                                                                   "file").toString();
+				getParameter(messageContext, "file") == null ? "" : getParameter(
+						messageContext,
+						"file").toString();
 		String suffixs =
-		                 getParameter(messageContext, "suffixs") == null ? "" : getParameter(
-		                                                                                     messageContext,
-		                                                                                     "suffixs").toString();
-		String newFileName =
-		                     getParameter(messageContext, "archivefilename") == null ? "" : getParameter(
-		                                                                                                 messageContext,
-		                                                                                                 "archivefilename").toString();
+				getParameter(messageContext, "suffixs") == null ? "" : getParameter(
+						messageContext,
+						"suffixs").toString();
+		String archiveFileLocation =
+				getParameter(messageContext, "archiveFileLocation") == null ? "" : getParameter(
+						messageContext,
+						"archiveFileLocation").toString();
 
+		String newFileName =
+				getParameter(messageContext, "newfilename") == null ? "" : getParameter(
+						messageContext,
+						"newfilename").toString();
 		String archiveType =
-		                     getParameter(messageContext, "archivetype") == null ? "" : getParameter(
-		                                                                                             messageContext,
-		                                                                                             "archivetype").toString();
+				getParameter(messageContext, "archivetype") == null ? "" : getParameter(
+						messageContext,
+						"archivetype").toString();
 
 		String filepattern =
-		                     getParameter(messageContext, "filepattern") == null ? "" : getParameter(
-		                                                                                             messageContext,
-		                                                                                             "filepattern").toString();
+				getParameter(messageContext, "filepattern") == null ? "" : getParameter(
+						messageContext,
+						"filepattern").toString();
 		String dirpattern =
-		                    getParameter(messageContext, "dirpattern") == null ? "" : getParameter(
-		                                                                                           messageContext,
-		                                                                                           "dirpattern").toString();
+				getParameter(messageContext, "dirpattern") == null ? "" : getParameter(
+						messageContext,
+						"dirpattern").toString();
 		boolean archivedirectory =
-		                           getParameter(messageContext, "archivedirectory") == null ? false : Boolean.parseBoolean(getParameter(
-		                                                                                                                                messageContext,
-		                                                                                                                                "archivedirectory").toString());
+				getParameter(messageContext, "archivedirectory") == null ? false : Boolean.parseBoolean(getParameter(
+						messageContext,
+						"archivedirectory").toString());
 		if (log.isDebugEnabled()) {
 			log.info("File creation started..." + filename.toString());
 			log.info("File Location..." + fileLocation.toString());
@@ -88,68 +92,76 @@ public class FileArchives extends AbstractConnector implements Connector {
 
 		boolean resultStatus = false;
 
-		File file = new File(newFileName.toString());
-
-		File inputDirectory = new File(fileLocation.toString());
-
-		File[] subdirs = inputDirectory.listFiles();
-		Collection<File> fileList = new ArrayList<File>();
-		if (suffixs.equals("")) {
-			if (archivedirectory) {
-				for (File f : subdirs) {
-					fileList.add(f);
-				}
-			} else {
-				fileList =
-				           FileUtils.listFiles(inputDirectory, TrueFileFilter.INSTANCE,
-				                               TrueFileFilter.INSTANCE);
+		File newFile = new File(archiveFileLocation);
+			if (!newFile.exists())  {
+					newFile.mkdir();
 			}
+String str=archiveFileLocation + newFileName;
+			File file = new File(str);
+
+
+			File inputDirectory = new File(fileLocation.toString());
+
+			File[] subdirs = inputDirectory.listFiles();
+			Collection<File> fileList = new ArrayList<File>();
+			if (suffixs.equals("")) {
+				if (archivedirectory) {
+					for (File f : subdirs) {
+						fileList.add(f);
+					}
+				} else {
+					fileList =
+							FileUtils.listFiles(inputDirectory, TrueFileFilter.INSTANCE,
+									TrueFileFilter.INSTANCE);
+				}
 
-		} else {
-
-			final String[] SUFFIX = suffixs.split(",".toString());// { "xls" };
-			fileList = FileUtils.listFiles(inputDirectory, SUFFIX, true);
-		}
+			} else {
 
-		Collection<File> filteredList = new ArrayList<File>();
-		if (filepattern.equals("") && dirpattern.equals("")) {
-			filteredList = fileList;
-		} else {
-			if (!filepattern.equals("")) {
-				FILE_PATTERN = filepattern;
+				final String[] SUFFIX = suffixs.split(",".toString());// { "xls" };
+				fileList = FileUtils.listFiles(inputDirectory, SUFFIX, true);
 			}
-			if (!dirpattern.equals("")) {
-				DIR_PATTERN = dirpattern;
+
+			Collection<File> filteredList = new ArrayList<File>();
+			if (filepattern.equals("") && dirpattern.equals("")) {
+				filteredList = fileList;
+			} else {
+				if (!filepattern.equals("")) {
+					FILE_PATTERN = filepattern;
+				}
+				if (!dirpattern.equals("")) {
+					DIR_PATTERN = dirpattern;
+				}
+				for (File filterFile : fileList) {
+					if (new FilePattenMatcher(FILE_PATTERN).validate(filterFile.getName())) {
+						filteredList.add(filterFile);
+					} else if (filterFile.isDirectory() &&
+							new FilePattenMatcher(DIR_PATTERN).validate(filterFile.getName())) {
+						filteredList.add(filterFile);
+					}
+				}
 			}
-			for (File filterFile : fileList) {
-				if (new FilePattenMatcher(FILE_PATTERN).validate(filterFile.getName())) {
-					filteredList.add(filterFile);
-				} else if (filterFile.isDirectory() &&
-				           new FilePattenMatcher(DIR_PATTERN).validate(filterFile.getName())) {
-					filteredList.add(filterFile);
+			try {
+				if (archiveType.equals(ArchiveType.TAR_GZIP.toString())) {
+					new FileCompressUtil().compressFiles(filteredList, filename, file, ArchiveType.TAR_GZIP);
+				} else {
+					new FileCompressUtil().compressFiles(filteredList, filename, file, ArchiveType.ZIP);
 				}
+				resultStatus = true;
+			} catch (IOException e) {
+
+				handleException(e.getMessage(), messageContext);
+				log.error(e.getMessage());
+				resultStatus = false;
 			}
-		}
-		try {
-			if (archiveType.equals(ArchiveType.TAR_GZIP.toString())) {
-				new FileCompressUtil().compressFiles(filteredList, file, ArchiveType.TAR_GZIP);
-			} else {
-				new FileCompressUtil().compressFiles(filteredList, file, ArchiveType.ZIP);
+			generateResults(messageContext, resultStatus);
+			if (log.isDebugEnabled()) {
+				log.info("File archived......");
 			}
-			resultStatus = true;
-		} catch (IOException e) {
-
-			handleException(e.getMessage(), messageContext);
-			log.error(e.getMessage());
-			resultStatus = false;
-		}
-		generateResults(messageContext, resultStatus);
-		if (log.isDebugEnabled()) {
-			log.info("File archived......");
-		}
 
 	}
 
+
+
 	/**
 	 * Generate the results
 	 * 
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCopy.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCopy.java
index bb73d54..d8b8915 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCopy.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCopy.java
@@ -128,7 +128,7 @@ public class FileCopy extends AbstractConnector implements Connector {
 		FileSystemOptions opts = FTPSiteUtils.createDefaultOptions();
 
 		FileSystemManager manager = VFS.getManager();
-		FileObject localFile = manager.resolveFile(fileLocation + filename,opts);
+		FileObject localFile = manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation,filename),opts);
 		FileObject remoteFile = manager.resolveFile(sftpURL, opts);
 		if (isFolder) {
 			remoteFile.copyFrom(localFile, Selectors.SELECT_SELF_AND_CHILDREN);
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCopyInStream.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCopyInStream.java
index 8e0d8b3..df71201 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCopyInStream.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCopyInStream.java
@@ -119,7 +119,7 @@ public class FileCopyInStream extends AbstractConnector implements Connector {
 		opts = FTPSiteUtils.createDefaultOptions();
 
 		FileSystemManager manager = VFS.getManager();
-		FileObject localFile = manager.resolveFile(fileLocation + filename, opts);
+		FileObject localFile = manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation,filename), opts);
 		FileObject remoteFile = manager.resolveFile(sftpURL, opts);
 
 		InputStream fin = null;
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCreate.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCreate.java
index 41acc9f..d97eaab 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCreate.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileCreate.java
@@ -120,7 +120,7 @@ public class FileCreate extends AbstractConnector implements Connector {
 	                           String encoding, String fileAProcess, Boolean isFolder)
 	                                                                                  throws FileSystemException,
 	                                                                                  IOException {
-		String sftpURL = fileLocation + filename;
+		String sftpURL = FTPSiteUtils.getFileUrl(fileLocation,filename);
 
 		boolean resultStatus = false;
 
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileDelete.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileDelete.java
index d5313f7..19fb7ca 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileDelete.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileDelete.java
@@ -118,7 +118,7 @@ public class FileDelete extends AbstractConnector implements Connector {
 		FileSystemManager manager = VFS.getManager();
 
 		// Create remote object
-		FileObject remoteFile = manager.resolveFile(fileLocation + filename, opts);
+		FileObject remoteFile = manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation,filename), opts);
 		if (!filebeforepprocess.equals("")) {
 			FileObject fBeforeProcess = manager.resolveFile(filebeforepprocess + filename, opts);
 			fBeforeProcess.copyFrom(remoteFile, Selectors.SELECT_SELF);
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileExist.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileExist.java
index e1e2451..49908f7 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileExist.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileExist.java
@@ -118,7 +118,7 @@ public class FileExist extends AbstractConnector implements Connector {
 
 		// Create remote object
 		FileObject remoteFile =
-		                        manager.resolveFile(fileLocation.toString() + filename.toString(),
+		                        manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation,filename),
 		                                            FTPSiteUtils.createDefaultOptions());
 
 		if (remoteFile.exists()) {
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileList.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileList.java
index c86d6cb..aab9b3a 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileList.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileList.java
@@ -48,19 +48,23 @@ public class FileList extends AbstractConnector implements Connector {
                 getParameter(messageContext, "filelocation") == null ? "" : getParameter(
                         messageContext,
                         "filelocation").toString();
+        String filename =
+                getParameter(messageContext, "file") == null ? "" : getParameter(
+                        messageContext,
+                        "file").toString();
 
-        list(messageContext, fileLocation);
+        list(messageContext, fileLocation,filename);
         log.info("All files are listed......");
     }
 
-    public void list(MessageContext messageContext, String fileLocation) throws SynapseException {
+    public void list(MessageContext messageContext, String fileLocation,String fileName) throws SynapseException {
 
         try {
             FileSystemOptions opts = FTPSiteUtils.createDefaultOptions();
             FileSystemManager manager = VFS.getManager();
 
             // Create remote object
-            FileObject remoteFile = manager.resolveFile(fileLocation, opts);
+            FileObject remoteFile = manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation,fileName), opts);
             if (remoteFile.exists()) {
                 log.info("Reading a zip File.");
                 // open the zip file
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileMove.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileMove.java
index fd7806f..2bd4fc4 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileMove.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileMove.java
@@ -128,7 +128,7 @@ public class FileMove extends AbstractConnector implements Connector {
 		FileSystemOptions opts = FTPSiteUtils.createDefaultOptions();
 		FileSystemManager manager = VFS.getManager();
 		// Create remote object
-		FileObject remoteFile = manager.resolveFile(fileLocation + filename, opts);
+		FileObject remoteFile = manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation,filename), opts);
 		FileObject newFile = manager.resolveFile(newFileLocation + filename, opts);
 		if (!filebeforepprocess.equals("")) {
 			FileObject fBeforeProcess = manager.resolveFile(filebeforepprocess + filename, opts);
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileRead.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileRead.java
index 6358600..21ac7f9 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileRead.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileRead.java
@@ -52,7 +52,7 @@ public class FileRead extends AbstractConnector implements Connector {
         try {
             fsManager = VFS.getManager();
             FileSystemOptions opts = FTPSiteUtils.createDefaultOptions();
-            fileObj = fsManager.resolveFile(fileLocation, opts);
+            fileObj = fsManager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation), opts);
             if (fileObj.exists()) {
                 if (fileObj.getType() == FileType.FOLDER) {
                     FileObject[] children = fileObj.getChildren();
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileRename.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileRename.java
index 46f263d..39f8037 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileRename.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileRename.java
@@ -124,13 +124,13 @@ public class FileRename extends AbstractConnector implements Connector {
 		if (manager != null) {
 			// Create remote object
 			FileObject remoteFile =
-			                        manager.resolveFile(fileLocation.toString() +
-			                                                    filename.toString(),
+			                        manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation,
+													filename),
 			                                            FTPSiteUtils.createDefaultOptions());
 
 			FileObject reNameFile =
-			                        manager.resolveFile(fileLocation.toString() +
-			                                                    newFileName.toString(),
+			                        manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation,
+													newFileName),
 			                                            FTPSiteUtils.createDefaultOptions());
 			if (remoteFile.exists()) {
 				if (!filebeforepprocess.equals("")) {
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileSearch.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileSearch.java
index 1216324..55833eb 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileSearch.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/FileSearch.java
@@ -175,7 +175,7 @@ public class FileSearch extends AbstractConnector implements Connector {
 		FileSystemOptions opts = FTPSiteUtils.createDefaultOptions();
 		FileSystemManager manager = VFS.getManager();
 
-		FileObject remoteFile = manager.resolveFile(fileLocation, opts);
+		FileObject remoteFile = manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation), opts);
 		FileObject[] children = remoteFile.getChildren();
 
 		final String FILE_PATTERN = filepattern;
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/Fileunzip.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/Fileunzip.java
index c77a3bb..be04ed3 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/Fileunzip.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/Fileunzip.java
@@ -43,6 +43,10 @@ public class Fileunzip extends AbstractConnector implements Connector {
                 getParameter(messageContext, "filelocation") == null ? "" : getParameter(
                         messageContext,
                         "filelocation").toString();
+        String filename =
+                getParameter(messageContext, "file") == null ? "" : getParameter(
+                        messageContext,
+                        "file").toString();
 
         String newFileLocation =
                 getParameter(messageContext, "newfilelocation") == null ? "" : getParameter(
@@ -51,7 +55,7 @@ public class Fileunzip extends AbstractConnector implements Connector {
 
         boolean resultStatus;
         try {
-            resultStatus = new FileUnzipUtil().unzip(fileLocation, newFileLocation, messageContext);
+            resultStatus = new FileUnzipUtil().unzip(fileLocation,filename, newFileLocation, messageContext);
         } catch (Exception e) {
             handleException(e.getMessage(), messageContext);
             resultStatus = false;
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FTPSiteUtils.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FTPSiteUtils.java
index b70f66e..993cfdc 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FTPSiteUtils.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FTPSiteUtils.java
@@ -35,4 +35,55 @@ public class FTPSiteUtils {
 		return opts;
 
 	}
+
+
+	/**
+	 * Get file url considering query params, if exists.
+	 *
+	 * @param fileLocation
+	 * @param fileName
+	 * @return
+	 */
+	public static String getFileUrl(String fileLocation, String fileName) {
+		if (fileLocation.contains("?")) {
+			int index = fileLocation.indexOf("?");
+			String path = fileLocation.substring(0, index);
+			String queryParam = fileLocation.substring(index);
+			return path + fileName + queryParam;
+		}
+		return fileLocation + fileName;
+	}
+
+	/**
+	 * Get file path without connection details.
+	 *
+	 * @param fileLocation
+	 * @param fileName
+	 * @return
+	 */
+	public static String getFileUrlWithoutQueryParams(String fileLocation, String fileName) {
+		if (fileLocation.contains("?")) {
+			int index = fileLocation.indexOf("?");
+			String path = fileLocation.substring(0, index);
+			return path + fileName;
+		}
+		return fileLocation + fileName;
+	}
+
+	/**
+	 * Get file path without connection details.
+	 *
+	 * @param fileLocation
+	 * @return
+	 */
+
+	public static String getFileUrl(String fileLocation) {
+		if (fileLocation.contains("?")) {
+			int index = fileLocation.indexOf("?");
+			String path = fileLocation.substring(0, index);
+			String queryParam = fileLocation.substring(index);
+			return path + queryParam;
+		}
+		return fileLocation;
+	}
 }
\ No newline at end of file
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileCompressUtil.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileCompressUtil.java
index 2daa018..0e89e05 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileCompressUtil.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileCompressUtil.java
@@ -25,15 +25,15 @@ public class FileCompressUtil {
 
 	/**
 	 * Compress the files based on the archive type
-	 * 
-	 * 
+	 *
 	 * @param files
 	 * @param file
+	 * @param fileName
 	 * @param archiveType
 	 * @throws IOException
 	 */
-	public void compressFiles(Collection files, File file, ArchiveType archiveType)
-	                                                                               throws IOException {
+	public void compressFiles(Collection files, String fileName, File file, ArchiveType archiveType)
+			throws IOException {
 		log.info("Compressing " + files.size() + " to " + file.getAbsoluteFile());
 		// Create the output stream for the output file
 		FileOutputStream fos;
@@ -43,10 +43,10 @@ public class FileCompressUtil {
 				// Wrap the output file stream in streams that will tar and gzip
 				// everything
 				TarArchiveOutputStream taos =
-				                              new TarArchiveOutputStream(
-				                                                         new GZIPOutputStream(
-				                                                                              new BufferedOutputStream(
-				                                                                                                       fos)));
+						new TarArchiveOutputStream(
+								new GZIPOutputStream(
+										new BufferedOutputStream(
+												fos)));
 				// TAR has an 8 gig file limit by default, this gets around that
 				taos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);
 				// to get past the 8 gig limit; TAR originally didn't support
@@ -57,8 +57,14 @@ public class FileCompressUtil {
 				Iterator iterator = files.iterator();
 				while (iterator.hasNext()) {
 					File f = (File) iterator.next();
-					addFilesToCompression(taos, f, ".", ArchiveType.TAR_GZIP);
-					// do something to object here...
+					if (!fileName.equals("")) {
+						if (f.toString().equals(fileName)) {
+							addFilesToCompression(taos, f, ".", ArchiveType.TAR_GZIP);
+							// do something to object here...
+						}
+					} else {
+						addFilesToCompression(taos, f, ".", ArchiveType.TAR_GZIP);
+					}
 				}
 
 				// Close everything up
@@ -70,9 +76,9 @@ public class FileCompressUtil {
 				// Wrap the output file stream in streams that will tar and zip
 				// everything
 				ZipArchiveOutputStream zaos =
-				                              new ZipArchiveOutputStream(
-				                                                         new BufferedOutputStream(
-				                                                                                  fos));
+						new ZipArchiveOutputStream(
+								new BufferedOutputStream(
+										fos));
 				zaos.setEncoding("UTF-8");
 				zaos.setCreateUnicodeExtraFields(ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS);
 
@@ -80,8 +86,14 @@ public class FileCompressUtil {
 				Iterator iterator1 = files.iterator();
 				while (iterator1.hasNext()) {
 					File f = (File) iterator1.next();
-					addFilesToCompression(zaos, f, ".", ArchiveType.ZIP);
-					// do something to object here...
+					if (!fileName.equals("")) {
+						if (f.getName().equals(fileName)) {
+							addFilesToCompression(zaos, f, ".", ArchiveType.ZIP);
+							// do something to object here...
+						}
+					} else {
+						addFilesToCompression(zaos, f, ".", ArchiveType.ZIP);
+					}
 				}
 
 				// Close everything up
@@ -93,7 +105,7 @@ public class FileCompressUtil {
 
 	/**
 	 * Add the files to compression
-	 * 
+	 *
 	 * @param taos
 	 * @param file
 	 * @param dir
@@ -101,7 +113,7 @@ public class FileCompressUtil {
 	 * @throws IOException
 	 */
 	private void addFilesToCompression(ArchiveOutputStream taos, File file, String dir,
-	                                   ArchiveType archiveType) throws IOException {
+									   ArchiveType archiveType) throws IOException {
 
 		// Create an entry for the file
 		switch (archiveType) {
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileConstants.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileConstants.java
index e647926..228354b 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileConstants.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileConstants.java
@@ -17,6 +17,7 @@ package org.wso2.carbon.connector.util;
 
 public final class FileConstants {
     public static final String FILE_LOCATION = "filelocation";
+    public static final String FILE_NAME="file";
     public static final String CONTENT_TYPE = "contenttype";
     public static final String STREAMING = "streaming";   
     public static final String FILE_PATTERN = "filepattern";   
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileUnzipUtil.java b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileUnzipUtil.java
index 8700a3c..6e12cb7 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileUnzipUtil.java
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/java/org/wso2/carbon/connector/util/FileUnzipUtil.java
@@ -38,10 +38,11 @@ public class FileUnzipUtil {
     private static Log log = LogFactory.getLog(FileUnzipUtil.class);
 
     /**
-     * @param zipFilePath   : Location of the zip file
+     * @param fileLocation   : Location of the zip file
+     * @param fileName :file name
      * @param destDirectory Location of the destination folder
      */
-    public boolean unzip(String zipFilePath, String destDirectory, MessageContext messageContext) throws
+    public boolean unzip(String fileLocation, String fileName, String destDirectory, MessageContext messageContext) throws
             SynapseException, IOException {
 
         OMFactory factory = OMAbstractFactory.getOMFactory();
@@ -52,7 +53,7 @@ public class FileUnzipUtil {
             FileSystemOptions opts = FTPSiteUtils.createDefaultOptions();
             FileSystemManager manager = VFS.getManager();
             // Create remote object
-            FileObject remoteFile = manager.resolveFile(zipFilePath, opts);
+            FileObject remoteFile = manager.resolveFile(FTPSiteUtils.getFileUrl(fileLocation,fileName), opts);
             FileObject remoteDesFile = manager.resolveFile(destDirectory, opts);
             // File destDir = new File(destDirectory);
             if (remoteFile.exists()) {
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/filearchives-template.xml b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/filearchives-template.xml
index ae46291..64e88ee 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/filearchives-template.xml
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/filearchives-template.xml
@@ -2,20 +2,23 @@
     <parameter name="file"/>
     <parameter name="filelocation"/>
     <parameter name="suffixs"/>
-    <parameter name="archivefilename"/>
+    <parameter name="archiveFileLocation"/>
     <parameter name="filepattern"/> 
     <parameter name="dirpattern"/> 
     <parameter name="archivetype"/>
     <parameter name="archivedirectory"/>
+    <parameter name="newfilename"/>
+
       
     <sequence>
         <log level="full" category="debug">
             <property name="file" expression="$func:file" />  
             <property name="filelocation" expression="$func:filelocation" />
             <property name="suffixs" expression="$func:suffixs" />
-            <property name="archivefilename" expression="$func:archivefilename" />
+            <property name="archiveFileLocation" expression="$func:archiveFileLocation" />
             <property name="filepattern" expression="$func:filepattern" />
             <property name="dirpattern" expression="$func:dirpattern" />
+            <property name="newfilename" expression="$func:newfilename" />
         </log>
         <class name="org.wso2.carbon.connector.FileArchives" />
     </sequence>
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/fileunzip-template.xml b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/fileunzip-template.xml
index 2ecbb18..4428860 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/fileunzip-template.xml
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/fileunzip-template.xml
@@ -18,11 +18,12 @@
 -->
 <template xmlns="http://ws.apache.org/ns/synapse" name="unzip">
     <parameter name="filelocation"/>
+    <parameter name="file"/>
     <parameter name="newfilelocation"/>
-    <parameter name="archivetype"/>
     <sequence>
         <log level="full" category="debug">
             <property name="filelocation" expression="$func:filelocation" />
+            <property name="file" expression="$func:file" />
             <property name="newfilelocation" expression="$func:newfilelocation" />
         </log>
         <class name="org.wso2.carbon.connector.Fileunzip" />
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/listfile-template.xml b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/listfile-template.xml
index 0b0ccc7..8297bba 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/listfile-template.xml
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/main/resources/file/listfile-template.xml
@@ -18,9 +18,11 @@
 -->
 <template xmlns="http://ws.apache.org/ns/synapse" name="listFile">
     <parameter name="filelocation"/>
+    <parameter name="file"/>
     <sequence>
         <log level="full" category="debug">
             <property name="filelocation" expression="$func:filelocation" />
+            <property name="file" expression="$func:file" />
         </log>
         <class name="org.wso2.carbon.connector.FileList" />
     </sequence>
diff --git a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/test/resources/artifacts/ESB/config/proxies/fileconnector/fileconnector.xml b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/test/resources/artifacts/ESB/config/proxies/fileconnector/fileconnector.xml
index 856a72d..6cb1072 100644
--- a/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/test/resources/artifacts/ESB/config/proxies/fileconnector/fileconnector.xml
+++ b/fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector/src/test/resources/artifacts/ESB/config/proxies/fileconnector/fileconnector.xml
@@ -35,7 +35,7 @@ under the License.
             <property name="newfilename" expression="//newfilename/text()"/>
             <property name="newfilelocation" expression="//newfilelocation/text()"/>
             <property name="addfilelocation" expression="//addfilelocation/text()"/>
-            <property name="archivefilename" expression="//archivefilename/text()"/>
+            <property name="archiveFileLocation" expression="//archiveFileLocation/text()"/>
             <property name="archivetype" expression="//archivetype/text()"/>
             <property name="filebeforeprocess" expression="//filebeforeprocess/text()"/>
             <property name="fileafterprocess" expression="//fileafterprocess/text()"/>
@@ -43,6 +43,7 @@ under the License.
             <property name="dirpattern" expression="//dirpattern/text()"/>
             <property name="suffixs" expression="//suffixs/text()"/>
             <property name="archivedirectory" expression="//archivedirectory/text()"/>
+            <property name="newFileName" expression="//newfilename/text()" />
 
             <switch source="get-property('transport', 'Action')">
                 <case regex="urn:create">
@@ -94,8 +95,9 @@ under the License.
                 <case regex="urn:archive">
                     <fileconnector.archives>
                         <filelocation>/home/vivekananthan/Desktop/file/archives/</filelocation>
-                        <archivefilename>/home/vivekananthan/Desktop/file/archives/archivestestfiletest1
-                        </archivefilename>
+                        <archiveFileLocation>/home/vivekananthan/Desktop/file/archives/
+                        </archiveFileLocation>
+                        <newfilename>archive1</newfilename>
                         <archivetype>TAR_GZIP</archivetype>
                         <filepattern>([^\s]+(\.(?i)(jar|png|gif|bmp|txt))$)</filepattern>
                         <dirpattern>aaaa</dirpattern>
diff --git a/pom.xml b/pom.xml
index 30ce085..37a855b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -108,7 +108,7 @@
         <module>tumblr/tumblr-connector/tumblr-connector-1.0.0</module>
         <module>insightly/insightly-connector/insightly-connector-1.0.0/org.wso2.carbon.connector</module>
         -->
-
+        <module>fileconnector/fileconnector-1.0.0/org.wso2.carbon.connector</module>
     </modules>
     <dependencies>
         <dependency>
